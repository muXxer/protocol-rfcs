asyncapi: 2.4.0
info:
  title: Node Event API
  contact:
    email: contact@iota.org
  version: 3.0.0
  description: >-
    The node event API is in charge of publishing information about events
    within the node software.
externalDocs:
  description: Find out more about IOTA
  url: "https://iota.org"
tags:
  - name: commitments
    description: Everything about commitments.
  - name: blocks
    description: Everything about blocks.
  - name: outputs
    description: Everything about outputs.
  - name: transactions
    description: Everything about transactions.
channels:
  commitment-info/latest:
    subscribe:
      operationId: commitmentInfoLatest
      tags:
        - name: commitments
      description: Publishes the latest known commitment slot index and its identifier.
      message:
        $ref: "#/components/messages/CommitmentInfoResponse"
  commitment-info/finalized:
    subscribe:
      tags:
        - name: commitments
      operationId: commitmentInfoFinalized
      description: Publishes the newly finalized commitment slot index and its identifier.
      message:
        $ref: "#/components/messages/CommitmentInfoResponse"
  commitments:
    subscribe:
      tags:
        - name: commitments
      operationId: commitments
      description: Publishes newly created commitment.
      message:
        $ref: "#/components/messages/CommitmentPayloadSerialized"
  blocks:
    subscribe:
      tags:
        - name: blocks
      operationId: blocks
      description: Publishes newly received blocks in their serialized binary form.
      message:
        $ref: "#/components/messages/Block"
  blocks/transaction:
    subscribe:
      tags:
        - name: blocks
        - name: transactions
      operationId: blocksTransaction
      description: >-
        Publishes newly received blocks containing a transaction payload in
        their serialized binary form.
      message:
        $ref: "#/components/messages/Block"
  blocks/transaction/tagged-data:
    subscribe:
      tags:
        - name: blocks
        - name: transactions
      operationId: blocksTransactionsWithTaggedData
      description: >-
        Publishes newly received blocks containing a Tagged Data payload inside
        transactions.
      message:
        $ref: "#/components/messages/Block"
  "blocks/transaction/tagged-data/{tag}":
    parameters:
      tag:
        description: >-
          Hex encoded tag of the Tagged Data Payload inside the Transaction
          Payload.
        schema:
          type: string
          examples:
            - "0xe45"
    subscribe:
      tags:
        - name: blocks
        - name: transactions
      operationId: blocksTransactionsWithTag
      description: >-
        Publishes newly received blocks containing a Tagged Data payload inside
        transactions with a specific tag.
      message:
        $ref: "#/components/messages/Block"
  blocks/tagged-data:
    subscribe:
      tags:
        - name: blocks
      operationId: blocksWithTaggedData
      description: >-
        Publishes newly received blocks which contain tagged data payloads
        (encoded in hex) in their serialized binary form.
      message:
        $ref: "#/components/messages/Block"
  "blocks/tagged-data/{tag}":
    parameters:
      tag:
        description: Hex encoded tag of the Tagged Data Payload.
        schema:
          type: string
          examples:
            - "0xe45"
    subscribe:
      tags:
        - name: blocks
      operationId: blocksWithSpecificTag
      description: >-
        Publishes newly received blocks which contain tagged data payloads with
        the specified tag parameter (encoded in hex) in their serialized binary
        form. Untagged data blocks do not get published.
      message:
        $ref: "#/components/messages/Block"
  "block-metadata/{blockId}":
    parameters:
      blockId:
        description: Hex encoded identifier of the block.
        schema:
          type: string
          examples:
            - "0xdbf86c778d69f413296c2d4d3086d76c74bf4d719e6e95c03a3d9a955ed39bcf3e00000000000000"
    subscribe:
      tags:
        - name: blocks
      operationId: blockSpecificMetadata
      description: Publishes metadata of a particular block whenever its metadata changes.
      message:
        $ref: "#/components/messages/BlockMetadata"
  block-metadata/accepted:
    subscribe:
      tags:
        - name: blocks
      operationId: blockMetadataAccepted
      description: Publishes metadata of a block whenever it gets accepted.
      message:
        $ref: "#/components/messages/BlockMetadata"
  block-metadata/confirmed:
    subscribe:
      tags:
        - name: blocks
      operationId: blockMetadataConfirmed
      description: Publishes metadata of a block whenever it gets confirmed.
      message:
        $ref: "#/components/messages/BlockMetadata"
  "transactions/{transactionId}/included-block":
    parameters:
      transactionId:
        description: Hex encoded identifier of the transaction.
        schema:
          type: string
          examples:
            - "0xd026f8b1c856d4e844cc734bbe095429fb880ec4d93f3ccffe3b292a7de17be7"
    subscribe:
      tags:
        - name: transactions
        - name: blocks
      operationId: transactionIncludedBlock
      description: >-
        Publishes the earliest confirmed block which carried the transaction with the
        specified transaction ID.
      message:
        $ref: "#/components/messages/Block"
  "outputs/{outputId}":
    parameters:
      outputId:
        description: Hex encoded identifier of the output.
        schema:
          type: string
          examples:
            - "0xd026f8b1c856d4e844cc734bbe095429fb880ec4d93f3ccffe3b292a7de17be70000"
    subscribe:
      tags:
        - name: outputs
      operationId: output
      description: >-
        Publishes the given wanted output on subscriptions.
      message:
        $ref: "#/components/messages/OutputPayload"

  "outputs/account/{accountId}":
    parameters:
      accountId:
        description: The unique identifier of the account chain. Hex encoded with 0x prefix.
        schema:
          type: string
          examples:
            - "0x1505ec099896ab05d9e08fbc7101ae4dff0093b3943b28f789ed2ca728bcc8d6"
    subscribe:
      tags:
        - name: outputs
      operationId: accountOutputByAccountId
      description: Publishes the newly created account output of an account chain.
      message:
        $ref: "#/components/messages/OutputPayload"

  "outputs/anchor/{anchorId}":
    parameters:
      anchorId:
        description: The unique identifier of the anchor output. Hex encoded with 0x prefix.
        schema:
          type: string
          examples:
            - "0x1505ec099896ab05d9e08fbc7101ae4dff0093b3943b28f789ed2ca728bcc8d6"
    subscribe:
      tags:
        - name: outputs
      operationId: anchorOutputByAnchorId
      description: Publishes the newly created anchor output.
      message:
        $ref: "#/components/messages/OutputPayload"

  "outputs/nft/{nftId}":
    parameters:
      nftId:
        description: The unique identifier of the nft chain. Hex encoded with 0x prefix.
        schema:
          type: string
          examples:
            - "0x19c82b32761fd8729a1a6c77f7c17597e4b9b01759794e52381f6a0050b0c11f"
    subscribe:
      tags:
        - name: outputs
      operationId: nftOutputByNftId
      description: Publishes the newly created nft output of an nft chain.
      message:
        $ref: "#/components/messages/OutputPayload"
  "outputs/foundry/{foundryId}":
    parameters:
      foundryId:
        description: >-
          The unique identifier of the foundry chain. Hex encoded with 0x
          prefix.
        schema:
          type: string
          examples:
            - "0x081505ec099896ab05d9e08fbc7101ae4dff0093b3943b28f789ed2ca728bcc8d60100000000"
    subscribe:
      tags:
        - name: outputs
      operationId: foundryOutputByFoundryId
      description: Publishes the newly created foundry output of a foundry chain.
      message:
        $ref: "#/components/messages/OutputPayload"
  "outputs/unlock/{condition}/{address}":
    parameters:
      condition:
        description: Type of unlock condition of the output to look for.
        schema:
          type: string
          enum:
            - address
            - storage-return
            - expiration
            - state-controller
            - governor
            - immutable-account
            - +
      address:
        description: Bech32 encoded address.
        schema:
          type: string
          examples:
            - "iota1qrwfnskm4f7utdrxqnkfntfqxehtpj8s0kf68zkcwm0yrhuemzjp5sjfw5v"
    subscribe:
      tags:
        - name: outputs
      operationId: outputByUnlockAndAddress
      description: >-
        Publishes newly created outputs that have a specific address in a
        specific unlock condition.
      message:
        $ref: "#/components/messages/OutputPayload"
  "outputs/unlock/{condition}/{address}/spent":
    parameters:
      condition:
        description: Type of unlock condition of the output to look for.
        schema:
          type: string
          enum:
            - address
            - storage-return
            - expiration
            - state-controller
            - governor
            - immutable-account
            - +
      address:
        description: Bech32 encoded address.
        schema:
          type: string
          examples:
            - "iota1qrwfnskm4f7utdrxqnkfntfqxehtpj8s0kf68zkcwm0yrhuemzjp5sjfw5v"
    subscribe:
      tags:
        - name: outputs
      operationId: outputByUnlockAndAddressSpent
      description: >-
        Publishes newly spent outputs that have a specific address in a specific
        unlock condition.
      message:
        $ref: "#/components/messages/OutputPayload"
components:
  messages:
    CommitmentPayload:
      contentType: application/json
      payload:
        $ref: "file://./common.yaml#/components/schemas/Commitment"

    CommitmentPayloadSerialized:
      contentType: application/vnd.iota.serializer-v2
      payload:
        $ref: "file://./common.yaml#/components/schemas/Commitment"

    CommitmentInfoResponse:
      contentType: application/json
      payload:
        type: object
        required:
          - commitmentIndex
        properties:
          commitmentIndex:
            type: number
            description: The slot index of the commitment.
            example: 242412
          commitmentId:
            type: string
            description: Hex encoded identifier of the slot commitment.
            example: "0x507d5c7d7105022b661e2c755173785f11707b7a6b3369111d000d1f145e652d5f436f26"

    Block:
      contentType: application/json
      payload:
        $ref: "file://./common.yaml#/components/schemas/Block"

    OutputPayload:
      contentType: application/json
      payload:
        $ref: "file://./common.yaml#/components/schemas/OutputWithMetadataResponse"

    BlockMetadata:
      contentType: application/json
      payload:
        $ref: "file://./common.yaml#/components/schemas/BlockMetadataResponse"
